# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Run Docker'
description: 'Run a docker image for Protobuf CI testing'
inputs:
  image:
    required: true
    description: "The docker image to use"
    type: string
  command:
    required: true
    description: "A raw docker command to run"
    type: string
  run-flags:
    required: false
    description: "Additional flags to pass to docker run"
    type: string

  # WARNING: loading from cache appears to be slower than pull!
  docker-cache:
    required: false
    description: "Enabled caching of pulled docker images."

runs:
  using: 'composite'
  steps:
    - name: Validate Docker image
      if: ${{ github.event_name == 'pull_request_target' && contains(inputs.image, 'us-docker.pkg.dev/protobuf-build/release-containers/') }}
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('Pull requests from forks cannot use release Docker images.')

    - name: Authenticate for GAR use
      shell: bash
      run: gcloud auth configure-docker -q us-docker.pkg.dev

    - name: Setup QEMU for possible emulation
      # Most tests don't require this, so just continue if there's a network issue.
      continue-on-error: true
      uses: docker/setup-qemu-action@e81a89b1732b9c48d79cd809d8d81d79c4647a18 # v2.1.0
      with:
        # This is mirrored for better reliability.
        image: us-docker.pkg.dev/protobuf-build/containers/test/binfmt@sha256:cf38696ffb9927c3433ad496a715b12ca94e67e67e9729ddf5dedbdb37e53b4d

    - name: Check docker cache
      if: ${{ inputs.docker-cache }}
      id: check-docker-cache
      uses: actions/cache@627f0f41f6904a5b1efbaed9f96d9eb58e92e920 # v3.2.4
      with:
        path: ci/docker/
        key: ${{ inputs.image }}

    - name: Pull and store if cache miss
      shell: bash
      if: ${{ inputs.docker-cache && steps.check-docker-cache.outputs.cache-hit != 'true' }}
      run: >
        time docker pull -q ${{ inputs.image }} &&
        mkdir -p ci/docker/$(dirname ${{ inputs.image }}) &&
        time docker image save ${{ inputs.image }} --output ./ci/docker/${{ inputs.image }}.tar

    - name: Use the cached image on cache hit
      shell: bash
      if: ${{ inputs.docker-cache && steps.check-docker-cache.outputs.cache-hit == 'true' }}
      run: time docker image load --input ./ci/docker/${{ inputs.image }}.tar

    - name: Pull fresh docker image
      if: ${{ !inputs.docker-cache }}
      id: docker-pull
      uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd # v2.8.3
      with:
        timeout_minutes: 5
        retry_wait_seconds: 60
        max_attempts: 5
        shell: bash
        command: time docker pull -q ${{ inputs.image }}

    - name: Report docker pull failures
      if: ${{ steps.docker-pull.outputs.exit_code }}
      shell: bash
      run: echo ${{ steps.docker-pull.exit_error }}

    - name: Forward sccache arguments
      shell: bash
      id: sccache
      if: ${{ env.SCCACHE_GCS_KEY_PATH != '' }}
      run: >
        echo "args="
        -e SCCACHE_GCS_RW_MODE=$SCCACHE_GCS_RW_MODE
        -e SCCACHE_GCS_BUCKET=$SCCACHE_GCS_BUCKET
        -e SCCACHE_GCS_KEY_PREFIX=$SCCACHE_GCS_KEY_PREFIX
        -e SCCACHE_GCS_KEY_PATH=/workspace/$(basename $SCCACHE_GCS_KEY_PATH)
        "" >> $GITHUB_OUTPUT

    - name: Run docker
      shell: bash
      run: >
        time docker run ${{ steps.sccache.outputs.args }}
        ${{ inputs.run-flags}} -v${{ github.workspace }}:/workspace
        ${{ inputs.image }} ${{ inputs.command }}
