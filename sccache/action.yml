# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup sccache'
description: 'Setup sccache for Protobuf CI testing'
inputs:
  credentials:
    required: true
    description: The GCP credentials to use for caching
    type: string
  cache-prefix:
    required: true
    description: A unique prefix to prevent cache pollution
    type: string

runs:
  using: 'composite'
  steps:
    - name: Symlink current Actions repo
      env:
        GH_ACTION_DIR: ${{ github.workspace }}/../../_actions/${{ github.action_repository }}/${{ github.action_ref }}/
        GH_ACTION_CLONE: ${{ github.workspace }}/../../_actions/current
      shell: bash
      run: ln -fs $GH_ACTION_DIR $GH_ACTION_CLONE

    # Setup credentials file
    - name: Authenticate GCloud
      id: auth
      uses: ./../../_actions/current/internal/gcloud-auth
      with:
        credentials: ${{ inputs.credentials }}

    - name: Configure sccache environment variables
      shell: bash
      run: |
        echo "SCCACHE_GCS_KEY_PATH=${{ steps.auth.outputs.credentials-file }}" >> $GITHUB_ENV
        echo "SCCACHE_GCS_RW_MODE=READ" >> $GITHUB_ENV
        echo "SCCACHE_GCS_BUCKET=protobuf-sccache" >> $GITHUB_ENV
        echo "SCCACHE_GCS_KEY_PREFIX=\"${{ inputs.cache-prefix }}\"" >> $GITHUB_ENV

    # Only trusted runs should have write access to our caches.
    - name: Disable sccache cache writing
      if: ${{ github.event_name != 'pull_request_target' }}
      shell: bash
      run: echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV

    - name: Configure sccache cmake arguments
      shell: bash
      run: |
        echo "SCCACHE_CMAKE_FLAGS=-DCMAKE_C_COMPILER_LAUNCHER=$(which sccache || echo 'sccache') -DCMAKE_CXX_COMPILER_LAUNCHER=$(which sccache || echo 'sccache')" >> $GITHUB_ENV
        which sccache || echo "No local ccache installation found"
        sccache --version || echo "No local ccache installation found"

    - name: Zero out sccache
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: sccache -z
