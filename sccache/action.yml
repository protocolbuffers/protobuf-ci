# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Setup sccache'
description: 'Setup sccache for Protobuf CI testing'
inputs:
  credentials:
    required: true
    description: The GCP credentials to use for caching
    type: string
  cache-prefix:
    required: true
    description: A unique prefix to prevent cache pollution
    type: string
  version:
    required: false
    default: 'v0.5.4'
    description: The version of sccache to use
    type: string

runs:
  using: 'composite'
  steps:
    - name: Symlink current Actions repo
      env:
        GH_ACTION_DIR: ${{ github.workspace }}/../../_actions/${{ github.action_repository }}/${{ github.action_ref }}/
        GH_ACTION_CLONE: ${{ github.workspace }}/../../_actions/current
      shell: bash
      run: ln -fs $GH_ACTION_DIR $GH_ACTION_CLONE

    - name: Validate cache name
      if: contains(inputs.cache-prefix, '+') || contains(inputs.cache-prefix, ' ')
      uses: actions/github-script@v3
      with:
        script: |
          core.setFailed('Cache prefixes can't contain symbols or spaces.')

    - name: Authenticate GCloud
      id: auth
      uses: ./../../_actions/current/internal/gcloud-auth
      with:
        credentials: ${{ inputs.credentials }}

    - name: Configure sccache environment variables
      shell: bash
      run: |
        echo "SCCACHE_GCS_KEY_PATH=${{ steps.auth.outputs.credentials-file }}" >> $GITHUB_ENV
        echo "SCCACHE_GCS_BUCKET=protobuf-sccache" >> $GITHUB_ENV
        echo "SCCACHE_GCS_KEY_PREFIX=${{ inputs.cache-prefix }}" >> $GITHUB_ENV
        echo "SCCACHE_IDLE_TIMEOUT=0" >> $GITHUB_ENV
        echo "SCCACHE_IGNORE_SERVER_IO_ERROR=1" >> $GITHUB_ENV

    # Only trusted runs should have write access to our caches.
    - name: Enable sccache cache writing
      # Always use read-write mode because of https://github.com/mozilla/sccache/issues/1886
      #if: ${{ github.event_name != 'pull_request_target' }}
      shell: bash
      run: echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV

    - name: Install sccache on non-Linux machines
      if: ${{ runner.os != 'Linux' }}
      uses: mozilla-actions/sccache-action@8417cffc2ec64127ad83077aceaa8631f7cdc83e # v0.0.3
      with:
        version: ${{ inputs.version }}

    - name: Warm-up sccache server (non-docker)
      if: ${{ runner.os != 'Linux' }}
      uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd # v2.8.3
      with:
        timeout_minutes: 5
        retry_wait_seconds: 60
        max_attempts: 5
        shell: bash
        continue_on_error: true
        command: sccache --start-server

    - name: Configure sccache cmake arguments
      shell: bash
      run: |
        echo "SCCACHE_CMAKE_FLAGS=-DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache" >> $GITHUB_ENV
        which sccache || echo "No local sccache installation found"
        sccache --version || echo "No local sccache installation found"

    - name: Zero out sccache
      if: ${{ runner.os != 'Linux' }}
      shell: bash
      run: sccache -z
